[32mINFO    [0m jubilant:_juju.py:237 cli: juju add-model --no-switch jubilant-d35a4f0c
[32mINFO    [0m jubilant:_juju.py:237 cli: juju deploy --model jubilant-d35a4f0c ./haproxy_amd64.charm haproxy --base ubuntu@24.04
[32mINFO    [0m jubilant:_juju.py:237 cli: juju deploy --model jubilant-d35a4f0c self-signed-certificates self-signed-certificates --channel 1/edge
[32mINFO    [0m jubilant:_juju.py:237 cli: juju config --model jubilant-d35a4f0c haproxy external-hostname=haproxy.internal
[32mINFO    [0m jubilant:_juju.py:237 cli: juju integrate --model jubilant-d35a4f0c haproxy:certificates self-signed-certificates:certificates
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .model.name = 'jubilant-d35a4f0c'
+ .model.type = 'iaas'
+ .model.controller = 'github-pr-0020d-lxd'
+ .model.cloud = 'localhost'
+ .model.version = '3.6.11'
+ .model.region = 'localhost'
+ .model.model_status.current = 'available'
+ .machines['0'].juju_status.current = 'pending'
+ .machines['0'].instance_id = 'pending'
+ .machines['0'].machine_status.current = 'allocating'
+ .machines['0'].machine_status.message = 'Creating container'
+ .machines['0'].modification_status.current = 'idle'
+ .machines['0'].base.name = 'ubuntu'
+ .machines['0'].base.channel = '24.04'
+ .machines['0'].constraints = 'arch=amd64'
+ .machines['1'].juju_status.current = 'pending'
+ .machines['1'].instance_id = 'pending'
+ .machines['1'].machine_status.current = 'allocating'
+ .machines['1'].machine_status.message = 'Creating container'
+ .machines['1'].modification_status.current = 'idle'
+ .machines['1'].base.name = 'ubuntu'
+ .machines['1'].base.channel = '24.04'
+ .machines['1'].constraints = 'arch=amd64'
+ .apps['haproxy'].charm = 'local:haproxy-0'
+ .apps['haproxy'].charm_origin = 'local'
+ .apps['haproxy'].charm_name = 'haproxy'
+ .apps['haproxy'].charm_rev = 0
+ .apps['haproxy'].exposed = False
+ .apps['haproxy'].base.name = 'ubuntu'
+ .apps['haproxy'].base.channel = '24.04'
+ .apps['haproxy'].app_status.current = 'waiting'
+ .apps['haproxy'].app_status.message = 'waiting for machine'
+ .apps['haproxy'].relations['certificates'][0].related_app = 'self-signed-certificates'
+ .apps['haproxy'].relations['certificates'][0].interface = 'tls-certificates'
+ .apps['haproxy'].relations['certificates'][0].scope = 'global'
+ .apps['haproxy'].relations['haproxy-peers'][0].related_app = 'haproxy'
+ .apps['haproxy'].relations['haproxy-peers'][0].interface = 'haproxy-peers'
+ .apps['haproxy'].relations['haproxy-peers'][0].scope = 'global'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'waiting'
+ .apps['haproxy'].units['haproxy/0'].workload_status.message = 'waiting for machine'
+ .apps['haproxy'].units['haproxy/0'].juju_status.current = 'allocating'
+ .apps['haproxy'].units['haproxy/0'].machine = '0'
+ .apps['haproxy'].endpoint_bindings[''] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['certificates'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['cos-agent'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ha'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-peers'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-route'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-route-tcp'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ingress'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ingress-per-unit'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['receive-ca-certs'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['reverseproxy'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['website'] = 'alpha'
+ .apps['self-signed-certificates'].charm = 'self-signed-certificates'
+ .apps['self-signed-certificates'].charm_origin = 'charmhub'
+ .apps['self-signed-certificates'].charm_name = 'self-signed-certificates'
+ .apps['self-signed-certificates'].charm_rev = 416
+ .apps['self-signed-certificates'].exposed = False
+ .apps['self-signed-certificates'].base.name = 'ubuntu'
+ .apps['self-signed-certificates'].base.channel = '24.04'
+ .apps['self-signed-certificates'].charm_channel = '1/edge'
+ .apps['self-signed-certificates'].app_status.current = 'waiting'
+ .apps['self-signed-certificates'].app_status.message = 'waiting for machine'
+ .apps['self-signed-certificates'].relations['certificates'][0].related_app = 'haproxy'
+ .apps['self-signed-certificates'].relations['certificates'][0].interface = 'tls-certificates'
+ .apps['self-signed-certificates'].relations['certificates'][0].scope = 'global'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'waiting'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'waiting for machine'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'allocating'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].machine = '1'
+ .apps['self-signed-certificates'].endpoint_bindings[''] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['certificates'] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['send-ca-cert'] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['tracing'] = 'alpha'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['0'].instance_id = 'pending'
- .machines['0'].machine_status.current = 'allocating'
- .machines['0'].machine_status.message = 'Creating container'
- .machines['0'].modification_status.current = 'idle'
+ .machines['0'].instance_id = 'juju-afc6a5-0'
+ .machines['0'].machine_status.current = 'running'
+ .machines['0'].machine_status.message = 'Container started'
+ .machines['0'].modification_status.current = 'applied'
+ .machines['0'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .machines['0'].dns_name = '10.36.0.196'
+ .machines['0'].ip_addresses[0] = '10.36.0.196'
- .machines['0'].machine_status.message = 'Container started'
+ .machines['0'].machine_status.message = 'Running'
+ .apps['haproxy'].units['haproxy/0'].public_address = '10.36.0.196'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['1'].instance_id = 'pending'
- .machines['1'].machine_status.current = 'allocating'
- .machines['1'].machine_status.message = 'Creating container'
- .machines['1'].modification_status.current = 'idle'
+ .machines['1'].instance_id = 'juju-afc6a5-1'
+ .machines['1'].machine_status.current = 'running'
+ .machines['1'].machine_status.message = 'Container started'
+ .machines['1'].modification_status.current = 'applied'
+ .machines['1'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .machines['1'].dns_name = '10.36.0.233'
+ .machines['1'].ip_addresses[0] = '10.36.0.233'
- .machines['1'].machine_status.message = 'Container started'
+ .machines['1'].machine_status.message = 'Running'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].public_address = '10.36.0.233'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['0'].juju_status.current = 'pending'
+ .machines['0'].juju_status.current = 'started'
+ .machines['0'].juju_status.version = '3.6.11'
+ .machines['0'].hostname = 'juju-afc6a5-0'
+ .machines['0'].network_interfaces['eth0'].ip_addresses[0] = '10.36.0.196'
+ .machines['0'].network_interfaces['eth0'].mac_address = '00:16:3e:fc:06:2c'
+ .machines['0'].network_interfaces['eth0'].is_up = True
+ .machines['0'].network_interfaces['eth0'].gateway = '10.36.0.1'
+ .machines['0'].network_interfaces['eth0'].space = 'alpha'
- .apps['haproxy'].app_status.message = 'waiting for machine'
+ .apps['haproxy'].app_status.message = 'agent initialising'
- .apps['haproxy'].units['haproxy/0'].workload_status.message = 'waiting for machine'
+ .apps['haproxy'].units['haproxy/0'].workload_status.message = 'agent initialising'
+ .apps['haproxy'].units['haproxy/0'].juju_status.version = '3.6.11'
+ .apps['haproxy'].units['haproxy/0'].leader = True
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['1'].juju_status.current = 'pending'
+ .machines['1'].juju_status.current = 'started'
+ .machines['1'].juju_status.version = '3.6.11'
+ .machines['1'].hostname = 'juju-afc6a5-1'
+ .machines['1'].network_interfaces['eth0'].ip_addresses[0] = '10.36.0.233'
+ .machines['1'].network_interfaces['eth0'].mac_address = '00:16:3e:25:d0:5f'
+ .machines['1'].network_interfaces['eth0'].is_up = True
+ .machines['1'].network_interfaces['eth0'].gateway = '10.36.0.1'
+ .machines['1'].network_interfaces['eth0'].space = 'alpha'
- .apps['self-signed-certificates'].app_status.message = 'waiting for machine'
+ .apps['self-signed-certificates'].app_status.message = 'agent initialising'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'waiting for machine'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'agent initialising'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.version = '3.6.11'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].leader = True
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].app_status.current = 'waiting'
- .apps['haproxy'].app_status.message = 'agent initialising'
+ .apps['haproxy'].app_status.current = 'maintenance'
+ .apps['haproxy'].app_status.message = 'installing charm software'
- .apps['haproxy'].units['haproxy/0'].workload_status.current = 'waiting'
- .apps['haproxy'].units['haproxy/0'].workload_status.message = 'agent initialising'
- .apps['haproxy'].units['haproxy/0'].juju_status.current = 'allocating'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'maintenance'
+ .apps['haproxy'].units['haproxy/0'].workload_status.message = 'installing charm software'
+ .apps['haproxy'].units['haproxy/0'].juju_status.current = 'executing'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running install hook'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['self-signed-certificates'].app_status.current = 'waiting'
- .apps['self-signed-certificates'].app_status.message = 'agent initialising'
+ .apps['self-signed-certificates'].app_status.current = 'maintenance'
+ .apps['self-signed-certificates'].app_status.message = 'installing charm software'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'waiting'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'agent initialising'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'allocating'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'maintenance'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'installing charm software'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running install hook'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['self-signed-certificates'].app_status.current = 'maintenance'
- .apps['self-signed-certificates'].app_status.message = 'installing charm software'
+ .apps['self-signed-certificates'].app_status.current = 'active'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'maintenance'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.message = 'installing charm software'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'active'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running install hook'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running leader-elected hook'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running leader-elected hook'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running config-changed hook'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running config-changed hook'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].app_status.message = 'installing charm software'
+ .apps['haproxy'].app_status.message = 'Configuring haproxy.'
- .apps['haproxy'].units['haproxy/0'].workload_status.message = 'installing charm software'
+ .apps['haproxy'].units['haproxy/0'].workload_status.message = 'Configuring haproxy.'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].app_status.current = 'maintenance'
- .apps['haproxy'].app_status.message = 'Configuring haproxy.'
+ .apps['haproxy'].app_status.current = 'active'
- .apps['haproxy'].units['haproxy/0'].workload_status.current = 'maintenance'
- .apps['haproxy'].units['haproxy/0'].workload_status.message = 'Configuring haproxy.'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'active'
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running install hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running certificates-relation-created hook'
+ .apps['haproxy'].units['haproxy/0'].open_ports[0] = '80/tcp'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running certificates-relation-changed hook for haproxy/0'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running certificates-relation-created hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running leader-elected hook'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].app_status.current = 'active'
+ .apps['haproxy'].app_status.current = 'maintenance'
+ .apps['haproxy'].app_status.message = 'Configuring haproxy.'
- .apps['haproxy'].units['haproxy/0'].workload_status.current = 'active'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'maintenance'
+ .apps['haproxy'].units['haproxy/0'].workload_status.message = 'Configuring haproxy.'
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running leader-elected hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running config-changed hook'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running certificates-relation-changed hook for haproxy/0'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].app_status.current = 'maintenance'
- .apps['haproxy'].app_status.message = 'Configuring haproxy.'
+ .apps['haproxy'].app_status.current = 'active'
- .apps['haproxy'].units['haproxy/0'].workload_status.current = 'maintenance'
- .apps['haproxy'].units['haproxy/0'].workload_status.message = 'Configuring haproxy.'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'active'
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running config-changed hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running start hook'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running certificates-relation-changed hook for haproxy/0'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running start hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running certificates-relation-changed hook'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'executing'
- .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.message = 'running certificates-relation-changed hook for haproxy/0'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running certificates-relation-changed hook'
+ .apps['haproxy'].units['haproxy/0'].juju_status.message = 'running certificates-relation-changed hook for self-signed-certificates/0'
[32mINFO    [0m jubilant:_juju.py:237 cli: juju deploy --model jubilant-d35a4f0c any-charm ingress-per-unit-requirer-any --channel beta --config 'src-overwrite={"any_charm.py": "# Copyright 2025 Canonical Ltd.\n# See LICENSE file for licensing details.\n# pylint: disable=duplicate-code,import-error,too-few-public-methods\n\n\"\"\"Ingress per unit requirer any charm.\"\"\"\nimport pathlib\n\nimport ops\nfrom any_charm_base import AnyCharmBase\nfrom charmlibs import apt\nfrom ingress_per_unit import IngressPerUnitReadyForUnitEvent, IngressPerUnitRequirer\n\n\nclass AnyCharm(AnyCharmBase):\n    \"\"\"Any charm that uses the ingress per unit requirer interface.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialize the charm.\n\n        Args:\n            args: Positional arguments.\n            kwargs: Keyword arguments.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        self.ingress_per_unit = IngressPerUnitRequirer(\n            self, port=80, relation_name=\"require-ingress-per-unit\", strip_prefix=True\n        )\n        self.framework.observe(self.on.install, self.start_server)\n        self.framework.observe(self.ingress_per_unit.on.ready_for_unit, self._on_ingress_ready)\n\n    def start_server(self, _: ops.InstallEvent):\n        \"\"\"Start the server.\"\"\"\n        apt.update()\n        apt.add_package(package_names=\"apache2\")\n        www_dir = pathlib.Path(\"/var/www/html\")\n        file_path = www_dir / \"ok\"\n        file_path.parent.mkdir(exist_ok=True)\n        file_path.write_text(\"ok!\")\n\n    def _on_ingress_ready(self, _: IngressPerUnitReadyForUnitEvent):\n        \"\"\"Relation changed handler.\"\"\"\n        self.unit.status = ops.ActiveStatus(\"Server Ready\")\n", "ingress_per_unit.py": "# Copyright 2022 Canonical Ltd.\n# See LICENSE file for licensing details.\n\nr\"\"\"# Interface Library for ingress_per_unit.\n\nThis library wraps relation endpoints using the `ingress_per_unit` interface\nand provides a Python API for both requesting and providing per-unit\ningress.\n\n## Getting Started\n\nTo get started using the library, you just need to fetch the library using `charmcraft`.\n\n```shell\ncharmcraft fetch-lib charms.traefik_k8s.v1.ingress_per_unit\n```\n\nAdd the `jsonschema` dependency to the `requirements.txt` of your charm.\n\n```yaml\nrequires:\n    ingress:\n        interface: ingress_per_unit\n        limit: 1\n```\n\nThen, to initialise the library:\n\n```python\nfrom charms.traefik_k8s.v1.ingress_per_unit import (IngressPerUnitRequirer,\n  IngressPerUnitReadyForUnitEvent, IngressPerUnitRevokedForUnitEvent)\n\nclass SomeCharm(CharmBase):\n  def __init__(self, *args):\n    # ...\n    self.ingress_per_unit = IngressPerUnitRequirer(self, port=80)\n    # The following event is triggered when the ingress URL to be used\n    # by this unit of `SomeCharm` is ready (or changes).\n    self.framework.observe(\n        self.ingress_per_unit.on.ready_for_unit, self._on_ingress_ready\n    )\n    self.framework.observe(\n        self.ingress_per_unit.on.revoked_for_unit, self._on_ingress_revoked\n    )\n\n    def _on_ingress_ready(self, event: IngressPerUnitReadyForUnitEvent):\n        # event.url is the same as self.ingress_per_unit.url\n        logger.info(\"This unit'"'"'s ingress URL: %s\", event.url)\n\n    def _on_ingress_revoked(self, event: IngressPerUnitRevokedForUnitEvent):\n        logger.info(\"This unit no longer has ingress\")\n```\n\nIf you wish to be notified also (or instead) when another unit'"'"'s ingress changes\n(e.g. if you'"'"'re the leader and you'"'"'re doing things with your peers'"'"' ingress),\nyou can pass `listen_to = \"all-units\" | \"both\"` to `IngressPerUnitRequirer`\nand observe `self.ingress_per_unit.on.ready` and `self.ingress_per_unit.on.revoked`.\n\"\"\"\n\nimport logging\nimport socket\nimport typing\nfrom typing import Any, Dict, List, Optional, Tuple, Union\n\nimport yaml\nfrom ops import EventBase\nfrom ops.charm import CharmBase, RelationEvent\nfrom ops.framework import EventSource, Object, ObjectEvents, StoredDict, StoredList, StoredState\nfrom ops.model import Application, ModelError, Relation, Unit\n\n# The unique Charmhub library identifier, never change it\nLIBID = \"7ef06111da2945ed84f4f5d4eb5b353a\"\n\n# Increment this major API version when introducing breaking changes\nLIBAPI = 1\n\n# Increment this PATCH version before using `charmcraft publish-lib` or reset\n# to 0 if you are raising the major API version\nLIBPATCH = 21\n\nlog = logging.getLogger(__name__)\n\ntry:\n    import jsonschema\n\n    DO_VALIDATION = True\nexcept ModuleNotFoundError:\n    log.warning(\n        \"The `ingress_per_unit` library needs the `jsonschema` package to be able \"\n        \"to do runtime data validation; without it, it will still work but validation \"\n        \"will be disabled. \\n\"\n        \"It is recommended to add `jsonschema` to the '"'"'requirements.txt'"'"' of your charm, \"\n        \"which will enable this feature.\"\n    )\n    DO_VALIDATION = False\n\n# LIBRARY GLOBS\nRELATION_INTERFACE = \"ingress_per_unit\"\nDEFAULT_RELATION_NAME = RELATION_INTERFACE.replace(\"_\", \"-\")\n\nINGRESS_REQUIRES_UNIT_SCHEMA = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"model\": {\"type\": \"string\"},\n        \"name\": {\"type\": \"string\"},\n        \"host\": {\"type\": \"string\"},\n        \"port\": {\"type\": \"string\"},\n        \"mode\": {\"type\": \"string\"},\n        \"strip-prefix\": {\"type\": \"string\"},\n        \"redirect-https\": {\"type\": \"string\"},\n        \"scheme\": {\"type\": \"string\"},\n    },\n    \"required\": [\"model\", \"name\", \"host\", \"port\"],\n}\nINGRESS_PROVIDES_APP_SCHEMA = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"ingress\": {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"url\": {\"type\": \"string\"},\n                    },\n                    \"required\": [\"url\"],\n                }\n            },\n        }\n    },\n    \"required\": [\"ingress\"],\n}\n\n# TYPES\ntry:\n    from typing import Literal, TypedDict  # type: ignore\nexcept ImportError:\n    from typing_extensions import Literal, TypedDict  # type: ignore  # py35 compat\n\n\n# Model of the data a unit implementing the requirer will need to provide.\nRequirerData = TypedDict(\n    \"RequirerData\",\n    {\n        \"model\": str,\n        \"name\": str,\n        \"host\": str,\n        \"port\": int,\n        \"mode\": Optional[Literal[\"tcp\", \"http\"]],\n        \"strip-prefix\": Optional[bool],\n        \"redirect-https\": Optional[bool],\n        \"scheme\": Optional[Literal[\"http\", \"https\"]],\n    },\n    total=False,\n)\n\n\nRequirerUnitData = Dict[Unit, \"RequirerData\"]\nKeyValueMapping = Dict[str, str]\nProviderApplicationData = Dict[str, KeyValueMapping]\n\n\ndef _type_convert_stored(obj: Any) -> Any:\n    \"\"\"Convert Stored* to their appropriate types, recursively.\"\"\"\n    if isinstance(obj, StoredList):\n        return list(map(_type_convert_stored, obj))\n    if isinstance(obj, StoredDict):\n        rdict: Dict[Any, Any] = {}\n        for k in obj.keys():\n            rdict[k] = _type_convert_stored(obj[k])\n        return rdict\n    return obj\n\n\ndef _validate_data(data: Any, schema: Any) -> None:\n    \"\"\"Checks whether `data` matches `schema`.\n\n    Will raise DataValidationError if the data is not valid, else return None.\n    \"\"\"\n    if not DO_VALIDATION:\n        return\n    try:\n        jsonschema.validate(instance=data, schema=schema)  # pyright: ignore[reportUnboundVariable]\n    except jsonschema.ValidationError as e:  # pyright: ignore[reportUnboundVariable]\n        raise DataValidationError(data, schema) from e\n\n\n# EXCEPTIONS\nclass DataValidationError(RuntimeError):\n    \"\"\"Raised when data validation fails on IPU relation data.\"\"\"\n\n\nclass RelationException(RuntimeError):\n    \"\"\"Base class for relation exceptions from this library.\n\n    Attributes:\n        relation: The Relation which caused the exception.\n        entity: The Application or Unit which caused the exception.\n    \"\"\"\n\n    def __init__(self, relation: Relation, entity: Union[Application, Unit]):\n        \"\"\"Initialize the relation exception base class.\n\n        Args:\n            relation: Relation instance.\n            entity: Application and Unit.\n        \"\"\"\n        super().__init__(relation)\n        self.args = (\n            \"There is an error with the relation {}:{} with {}\".format(\n                relation.name, relation.id, entity.name\n            ),\n        )\n        self.relation = relation\n        self.entity = entity\n\n\nclass RelationDataMismatchError(RelationException):\n    \"\"\"Data from different units do not match where they should.\"\"\"\n\n\nclass RelationPermissionError(RelationException):\n    \"\"\"Ingress is requested to do something for which it lacks permissions.\"\"\"\n\n    def __init__(self, relation: Relation, entity: Union[Application, Unit], message: str):\n        \"\"\"Initialize the exception.\n\n        Args:\n            relation: Relation instance.\n            entity: Application and Unit.\n            message: Exception message.\n        \"\"\"\n        super(RelationPermissionError, self).__init__(relation, entity)\n        self.args = (\n            \"Unable to write data to relation '"'"'{}:{}'"'"' with {}: {}\".format(\n                relation.name, relation.id, entity.name, message\n            ),\n        )\n\n\nclass _IngressPerUnitBase(Object):\n    \"\"\"Base class for IngressPerUnit interface classes.\"\"\"\n\n    def __init__(self, charm: CharmBase, relation_name: str = DEFAULT_RELATION_NAME):\n        \"\"\"Constructor for _IngressPerUnitBase.\n\n        Args:\n            charm: The charm that is instantiating the instance.\n            relation_name: The name of the relation name to bind to\n                (defaults to \"ingress-per-unit\").\n        \"\"\"\n        super().__init__(charm, relation_name)\n        self.charm: CharmBase = charm\n\n        self.relation_name = relation_name\n        self.app = self.charm.app\n        self.unit = self.charm.unit\n\n        observe = self.framework.observe\n        rel_events = charm.on[relation_name]\n        observe(rel_events.relation_created, self._handle_relation)\n        observe(rel_events.relation_joined, self._handle_relation)\n        observe(rel_events.relation_changed, self._handle_relation)\n        observe(rel_events.relation_departed, self._handle_relation)\n        observe(rel_events.relation_broken, self._handle_relation_broken)\n        observe(charm.on.leader_elected, self._handle_upgrade_or_leader)  # type: ignore\n        observe(charm.on.upgrade_charm, self._handle_upgrade_or_leader)  # type: ignore\n\n    @property\n    def relations(self) -> List[Relation]:\n        \"\"\"The list of Relation instances associated with this relation_name.\"\"\"\n        return list(self.charm.model.relations[self.relation_name])\n\n    def _handle_relation(self, event: RelationEvent) -> None:\n        \"\"\"Subclasses should implement this method to handle a relation update.\"\"\"\n        pass\n\n    def _handle_relation_broken(self, event: RelationEvent) -> None:\n        \"\"\"Subclasses should implement this method to handle a relation breaking.\"\"\"\n        pass\n\n    def _handle_upgrade_or_leader(self, event: EventBase) -> None:\n        \"\"\"Subclasses should implement this method to handle upgrades or leadership change.\"\"\"\n        pass\n\n    def is_ready(self, relation: Optional[Relation] = None) -> bool:\n        \"\"\"Checks whether the given relation is ready.\n\n        A relation is ready if the remote side has sent valid data.\n        \"\"\"\n        if relation is None:\n            return any(map(self.is_ready, self.relations))\n        if relation.app is None:\n            # No idea why, but this happened once.\n            return False\n        if not relation.app.name:  # type: ignore\n            # Juju doesn'"'"'t provide JUJU_REMOTE_APP during relation-broken\n            # hooks. See https://github.com/canonical/operator/issues/693\n            return False\n        return True\n\n\nclass IngressDataReadyEvent(RelationEvent):\n    \"\"\"Event triggered when the requirer has provided valid ingress data.\n\n    Also emitted when the data has changed.\n    If you receive this, you should handle it as if the data being\n    provided was new.\n    \"\"\"\n\n\nclass IngressDataRemovedEvent(RelationEvent):\n    \"\"\"Event triggered when a requirer has wiped its ingress data.\n\n    Also emitted when the requirer data has become incomplete or invalid.\n    If you receive this, you should handle it as if the remote unit no longer\n    wishes to receive ingress.\n    \"\"\"\n\n\nclass IngressEndpointsUpdatedEvent(RelationEvent):\n    \"\"\"Event triggered when the proxied endpoints change.\"\"\"\n\n\nclass IngressPerUnitProviderEvents(ObjectEvents):\n    \"\"\"Container for events for IngressPerUnit.\"\"\"\n\n    data_provided = EventSource(IngressDataReadyEvent)\n    data_removed = EventSource(IngressDataRemovedEvent)\n    endpoints_updated = EventSource(IngressEndpointsUpdatedEvent)\n\n\nclass IngressPerUnitProvider(_IngressPerUnitBase):\n    \"\"\"Implementation of the provider of ingress_per_unit.\"\"\"\n\n    on = IngressPerUnitProviderEvents()  # type: ignore\n\n    def _handle_relation(self, event: RelationEvent) -> None:\n        relation = event.relation\n        try:\n            self.validate(relation)\n        except RelationDataMismatchError as e:\n            self.on.data_removed.emit(relation=relation, app=relation.app)  # type: ignore\n            log.warning(\n                \"relation data mismatch: {} data_removed ingress for {}.\".format(e, relation)\n            )\n            return\n\n        if self.is_ready(relation):\n            self.on.data_provided.emit(relation=relation, app=relation.app)  # type: ignore\n        else:\n            self.on.data_removed.emit(relation=relation, app=relation.app)  # type: ignore\n\n    def _handle_relation_broken(self, event: RelationEvent) -> None:\n        # relation broken -> we revoke in any case\n        self.on.data_removed.emit(relation=event.relation, app=event.relation.app)  # type: ignore\n\n    def is_ready(self, relation: Optional[Relation] = None) -> bool:\n        \"\"\"Checks whether the given relation is ready.\n\n        Or any relation if not specified.\n        A given relation is ready if SOME remote side has sent valid data.\n        \"\"\"\n        if relation is None:\n            return any(map(self.is_ready, self.relations))\n\n        if not super().is_ready(relation):\n            return False\n\n        try:\n            requirer_units_data = self._requirer_units_data(relation)\n        except Exception:\n            log.exception(\"Cannot fetch ingress data for the '"'"'{}'"'"' relation\".format(relation))\n            return False\n\n        return any(requirer_units_data.values())\n\n    def validate(self, relation: Relation) -> None:\n        \"\"\"Checks whether the given relation is failed.\n\n        Or any relation if not specified.\n        \"\"\"\n        # verify that all remote units (requirer'"'"'s side) publish the same model.\n        # We do not validate the port because, in case of changes to the configuration\n        # of the charm or a new version of the charmed workload, e.g. over an upgrade,\n        # the remote port may be different among units.\n        expected_model = None  # It may be none for units that have not yet written data\n\n        remote_units_data = self._requirer_units_data(relation)\n        for remote_unit, remote_unit_data in remote_units_data.items():\n            if \"model\" in remote_unit_data:\n                remote_model = remote_unit_data[\"model\"]\n                if not expected_model:\n                    expected_model = remote_model\n                elif expected_model != remote_model:\n                    raise RelationDataMismatchError(relation, remote_unit)\n\n    def is_unit_ready(self, relation: Relation, unit: Unit) -> bool:\n        \"\"\"Report whether the given unit has shared data in its unit data bag.\"\"\"\n        # sanity check: this should not occur in production, but it may happen\n        # during testing: cfr https://github.com/canonical/traefik-k8s-operator/issues/39\n        assert (\n            unit in relation.units\n        ), \"attempting to get ready state for unit that does not belong to relation\"\n        try:\n            self._get_requirer_unit_data(relation, unit)\n        except (KeyError, DataValidationError):\n            return False\n        return True\n\n    def get_data(self, relation: Relation, unit: Unit) -> \"RequirerData\":\n        \"\"\"Fetch the data shared by the specified unit on the relation (Requirer side).\"\"\"\n        return self._get_requirer_unit_data(relation, unit)\n\n    def publish_url(self, relation: Relation, unit_name: str, url: str) -> None:\n        \"\"\"Place the ingress url in the application data bag for the units on the requirer side.\n\n        Assumes that this unit is leader.\n        \"\"\"\n        assert self.unit.is_leader(), \"only leaders can do this\"\n\n        raw_data = relation.data[self.app].get(\"ingress\", None)\n        data = yaml.safe_load(raw_data) if raw_data else {}\n        ingress = {\"ingress\": data}\n\n        # we ensure that the application databag has the shape we think it\n        # should have; to catch any inconsistencies early on.\n        try:\n            _validate_data(ingress, INGRESS_PROVIDES_APP_SCHEMA)\n        except DataValidationError as e:\n            log.error(\n                \"unable to publish url to {}: corrupted application databag ({})\".format(\n                    unit_name, e\n                )\n            )\n            return\n\n        # we update the data with a new url\n        data[unit_name] = {\"url\": url}\n\n        # we validate the data **again**, to ensure that we respected the schema\n        # and did not accidentally corrupt our own databag.\n        _validate_data(ingress, INGRESS_PROVIDES_APP_SCHEMA)\n        relation.data[self.app][\"ingress\"] = yaml.safe_dump(data)\n\n        self.on.endpoints_updated.emit(relation=relation, app=relation.app)\n\n    def wipe_ingress_data(self, relation: Relation) -> None:\n        \"\"\"Remove all published ingress data.\n\n        Assumes that this unit is leader.\n        \"\"\"\n        assert self.unit.is_leader(), \"only leaders can do this\"\n        try:\n            relation.data\n        except ModelError as e:\n            log.warning(\n                \"error {} accessing relation data for {!r}. \"\n                \"Probably a ghost of a dead relation is still \"\n                \"lingering around.\".format(e, relation.name)\n            )\n            return\n        del relation.data[self.app][\"ingress\"]\n        self.on.endpoints_updated.emit(relation=relation, app=relation.app)\n\n    def _requirer_units_data(self, relation: Relation) -> RequirerUnitData:\n        \"\"\"Fetch and validate the requirer'"'"'s units databag.\"\"\"\n        if not relation.app or not relation.app.name:\n            # Handle edge case where remote app name can be missing, e.g.,\n            # relation_broken events.\n            # FIXME https://github.com/canonical/traefik-k8s-operator/issues/34\n            return {}\n\n        remote_units = [unit for unit in relation.units if unit.app is not self.app]\n\n        requirer_units_data = {}\n        for remote_unit in remote_units:\n            try:\n                remote_data = self._get_requirer_unit_data(relation, remote_unit)\n            except KeyError:\n                # this remote unit didn'"'"'t share data yet\n                log.warning(\"Remote unit {} not ready.\".format(remote_unit.name))\n                continue\n            except DataValidationError as e:\n                # this remote unit sent invalid data.\n                log.error(\"Remote unit {} sent invalid data ({}).\".format(remote_unit.name, e))\n                continue\n\n            remote_data[\"port\"] = int(remote_data[\"port\"])\n            requirer_units_data[remote_unit] = remote_data\n        return requirer_units_data\n\n    def _get_requirer_unit_data(self, relation: Relation, remote_unit: Unit) -> RequirerData:  # type: ignore  # noqa\n        \"\"\"Fetch and validate the requirer unit data for this unit.\n\n        For convenience, we convert '"'"'port'"'"' to integer.\n        \"\"\"\n        if not relation.app or not relation.app.name:\n            # Handle edge case where remote app name can be missing, e.g.,\n            # relation_broken events.\n            # FIXME https://github.com/canonical/traefik-k8s-operator/issues/34\n            return {}\n\n        databag = relation.data[remote_unit]\n        remote_data: Dict[str, Union[int, str]] = {}\n        for k in (\n            \"port\",\n            \"host\",\n            \"model\",\n            \"name\",\n            \"mode\",\n            \"strip-prefix\",\n            \"redirect-https\",\n            \"scheme\",\n        ):\n            v = databag.get(k)\n            if v is not None:\n                remote_data[k] = v\n        _validate_data(remote_data, INGRESS_REQUIRES_UNIT_SCHEMA)\n        remote_data[\"port\"] = int(remote_data[\"port\"])\n        remote_data[\"strip-prefix\"] = bool(remote_data.get(\"strip-prefix\", \"false\") == \"true\")\n        remote_data[\"redirect-https\"] = bool(remote_data.get(\"redirect-https\", \"false\") == \"true\")\n        return typing.cast(RequirerData, remote_data)\n\n    def _provider_app_data(self, relation: Relation) -> ProviderApplicationData:\n        \"\"\"Fetch and validate the provider'"'"'s app databag.\"\"\"\n        if not relation.app or not relation.app.name:\n            # Handle edge case where remote app name can be missing, e.g.,\n            # relation_broken events.\n            # FIXME https://github.com/canonical/traefik-k8s-operator/issues/34\n            return {}\n\n        # we start by looking at the provider'"'"'s app databag\n        if self.unit.is_leader():\n            # only leaders can read their app'"'"'s data\n            data = relation.data[self.app].get(\"ingress\")\n            if not data:\n                return {}\n\n            deserialized = yaml.safe_load(data)\n            _validate_data({\"ingress\": deserialized}, INGRESS_PROVIDES_APP_SCHEMA)\n            return deserialized\n\n        return {}\n\n    @property\n    def proxied_endpoints(self) -> dict:\n        \"\"\"The ingress settings provided to units by this provider.\n\n        For example, when this IngressPerUnitProvider has provided the\n        `http://foo.bar/my-model.my-app-1` and\n        `http://foo.bar/my-model.my-app-2` URLs to the two units of the\n        my-app application, the returned dictionary will be:\n\n        ```\n        {\n            \"my-app/1\": {\n                \"url\": \"http://foo.bar/my-model.my-app-1\"\n            },\n            \"my-app/2\": {\n                \"url\": \"http://foo.bar/my-model.my-app-2\"\n            }\n        }\n        ```\n        \"\"\"\n        results = {}\n\n        for ingress_relation in self.relations:\n            provider_app_data = self._provider_app_data(ingress_relation)\n            results.update(provider_app_data)\n\n        return results\n\n\nclass _IPUEvent(RelationEvent):\n    __args__: Tuple[str, ...] = ()\n    __optional_kwargs__: Dict[str, Any] = {}\n\n    @classmethod\n    def __attrs__(cls):  # type: ignore\n        return cls.__args__ + tuple(cls.__optional_kwargs__.keys())\n\n    def __init__(self, handle, relation, *args, **kwargs):  # type: ignore\n        super().__init__(handle, relation, app=relation.app)\n\n        if not len(self.__args__) == len(args):\n            raise TypeError(\"expected {} args, got {}\".format(len(self.__args__), len(args)))\n\n        for attr, obj in zip(self.__args__, args):\n            setattr(self, attr, obj)\n        for attr, default in self.__optional_kwargs__.items():\n            obj = kwargs.get(attr, default)\n            setattr(self, attr, obj)\n\n    def snapshot(self) -> Dict[str, Any]:\n        dct = super().snapshot()\n        for attr in self.__attrs__():\n            obj = getattr(self, attr)\n            try:\n                dct[attr] = obj\n            except ValueError as e:\n                raise ValueError(\n                    \"cannot automagically serialize {}: \"\n                    \"override this method and do it \"\n                    \"manually.\".format(obj)\n                ) from e\n        return dct\n\n    def restore(self, snapshot: Any) -> None:\n        super().restore(snapshot)\n        for attr, obj in snapshot.items():\n            setattr(self, attr, obj)\n\n\nclass IngressPerUnitReadyEvent(_IPUEvent):\n    \"\"\"Ingress is ready (or has changed) for some unit.\n\n    Attrs:\n        `unit_name`: name of the unit for which ingress has been\n            provided/has changed.\n        `url`: the (new) url for that unit.\n    \"\"\"\n\n    __args__ = (\"unit_name\", \"url\")\n    if typing.TYPE_CHECKING:\n        unit_name = \"\"\n        url = \"\"\n\n\nclass IngressPerUnitReadyForUnitEvent(_IPUEvent):\n    \"\"\"Ingress is ready (or has changed) for this unit.\n\n    Is only fired on the unit(s) for which ingress has been provided or\n    has changed.\n    Attrs:\n        `url`: the (new) url for this unit.\n    \"\"\"\n\n    __args__ = (\"url\",)\n    if typing.TYPE_CHECKING:\n        url = \"\"\n\n\nclass IngressPerUnitRevokedEvent(_IPUEvent):\n    \"\"\"Ingress is revoked (or has changed) for some unit.\n\n    Attrs:\n        `unit_name`: the name of the unit whose ingress has been revoked.\n            this could be \"THIS\" unit, or a peer.\n    \"\"\"\n\n    __args__ = (\"unit_name\",)\n\n    if typing.TYPE_CHECKING:\n        unit_name = \"\"\n\n\nclass IngressPerUnitRevokedForUnitEvent(RelationEvent):\n    \"\"\"Ingress is revoked (or has changed) for this unit.\n\n    Is only fired on the unit(s) for which ingress has changed.\n    \"\"\"\n\n\nclass IngressPerUnitRequirerEvents(ObjectEvents):\n    \"\"\"Container for IUP events.\"\"\"\n\n    ready = EventSource(IngressPerUnitReadyEvent)\n    revoked = EventSource(IngressPerUnitRevokedEvent)\n    ready_for_unit = EventSource(IngressPerUnitReadyForUnitEvent)\n    revoked_for_unit = EventSource(IngressPerUnitRevokedForUnitEvent)\n\n\nclass IngressPerUnitRequirer(_IngressPerUnitBase):\n    \"\"\"Implementation of the requirer of ingress_per_unit.\"\"\"\n\n    on: IngressPerUnitRequirerEvents = IngressPerUnitRequirerEvents()\n    # used to prevent spurious urls to be sent out if the event we'"'"'re currently\n    # handling is a relation-broken one.\n    _stored = StoredState()\n\n    def __init__(\n        self,\n        charm: CharmBase,\n        relation_name: str = DEFAULT_RELATION_NAME,\n        *,\n        host: Optional[str] = None,\n        port: Optional[int] = None,\n        mode: Literal[\"tcp\", \"http\"] = \"http\",\n        listen_to: Literal[\"only-this-unit\", \"all-units\", \"both\"] = \"only-this-unit\",\n        strip_prefix: bool = False,\n        redirect_https: bool = False,\n        # FIXME: now that `provide_ingress_requirements` takes a scheme, this arg can be changed to\n        #  str type in v2.\n        scheme: typing.Callable[[], str] = lambda: \"http\",\n    ):\n        \"\"\"Constructor for IngressPerUnitRequirer.\n\n        The request args can be used to specify the ingress properties when the\n        instance is created. If any are set, at least `port` is required, and\n        they will be sent to the ingress provider as soon as it is available.\n        All request args must be given as keyword args.\n\n        Args:\n            charm: the charm that is instantiating the library.\n            relation_name: the name of the relation name to bind to\n                (defaults to \"ingress-per-unit\"; relation must be of interface\n                type \"ingress_per_unit\" and have \"limit: 1\").\n            host: Hostname to be used by the ingress provider to address the\n                requirer unit; if unspecified, the FQDN of the unit will be\n                used instead.\n            port: port to be used by the ingress provider to address the\n                    requirer unit.\n            mode: mode to be used between \"tcp\" and \"http\".\n            listen_to: Choose which events should be fired on this unit:\n                \"only-this-unit\": this unit will only be notified when ingress\n                  is ready/revoked for this unit.\n                \"all-units\": this unit will be notified when ingress is\n                  ready/revoked for any unit of this application, including\n                  itself.\n                \"all\": this unit will receive both event types (which means it\n                  will be notified *twice* of changes to this unit'"'"'s ingress!).\n            strip_prefix: remove prefixes from the URL path.\n            redirect_https: redirect incoming requests to HTTPS\n            scheme: callable returning the scheme to use when constructing the ingress url.\n        \"\"\"\n        super().__init__(charm, relation_name)\n        self._stored.set_default(current_urls=None)  # type: ignore\n\n        # if instantiated with a port, and we are related, then\n        # we immediately publish our ingress data  to speed up the process.\n        self._host = host\n        self._port = port\n        self._mode = mode\n        self._strip_prefix = strip_prefix\n        self._redirect_https = redirect_https\n        self._get_scheme = scheme\n\n        self.listen_to = listen_to\n\n        self.framework.observe(\n            self.charm.on[self.relation_name].relation_changed, self._handle_relation\n        )\n        self.framework.observe(\n            self.charm.on[self.relation_name].relation_broken, self._handle_relation\n        )\n\n    def _handle_relation(self, event: RelationEvent) -> None:\n        # we calculate the diff between the urls we were aware of\n        # before and those we know now\n        previous_urls = self._stored.current_urls or {}  # type: ignore\n\n        # since ops 2.10, breaking relations won'"'"'t show up in self.model.relations, so we'"'"'re safe\n        # in assuming all relations that are there are alive and well.\n        current_urls = self._urls_from_relation_data\n        self._stored.current_urls = current_urls  # type: ignore\n\n        removed = previous_urls.keys() - current_urls.keys()  # type: ignore\n        changed = {a for a in current_urls if current_urls[a] != previous_urls.get(a)}  # type: ignore  # noqa\n\n        this_unit_name = self.unit.name\n        # do not use self.relation in this context because if\n        # the event is relation-broken, self.relation might be None\n        relation = event.relation\n        if self.listen_to in {\"only-this-unit\", \"both\"}:\n            if this_unit_name in changed:\n                self.on.ready_for_unit.emit(relation, current_urls[this_unit_name])  # type: ignore\n\n            if this_unit_name in removed:\n                self.on.revoked_for_unit.emit(relation=relation, app=relation.app)  # type: ignore\n\n        if self.listen_to in {\"all-units\", \"both\"}:\n            for unit_name in changed:\n                self.on.ready.emit(relation, unit_name, current_urls[unit_name])  # type: ignore\n\n            for unit_name in removed:\n                self.on.revoked.emit(relation, unit_name)  # type: ignore\n\n        self._publish_auto_data()\n\n    def _handle_upgrade_or_leader(self, event: EventBase) -> None:\n        self._publish_auto_data()\n\n    def _publish_auto_data(self) -> None:\n        if self._port:\n            self.provide_ingress_requirements(host=self._host, port=self._port)\n\n    @property\n    def relation(self) -> Optional[Relation]:\n        \"\"\"The established Relation instance, or None if still unrelated.\"\"\"\n        return self.relations[0] if self.relations else None\n\n    def is_ready(self) -> bool:  # type: ignore\n        \"\"\"Checks whether the given relation is ready.\n\n        Or any relation if not specified.\n        A given relation is ready if the remote side has sent valid data.\n        \"\"\"\n        if not self.relation:\n            return False\n        if super().is_ready(self.relation) is False:\n            return False\n        return bool(self.url)\n\n    def provide_ingress_requirements(\n        self, *, scheme: Optional[str] = None, host: Optional[str] = None, port: int\n    ) -> None:\n        \"\"\"Publishes the data that Traefik needs to provide ingress.\n\n        Args:\n            scheme: Scheme to be used; if unspecified, use the one used by __init__.\n            host: Hostname to be used by the ingress provider to address the\n             requirer unit; if unspecified, FQDN will be used instead\n            port: the port of the service (required)\n        \"\"\"\n        # This public method may be used at various points of the charm lifecycle, possibly when\n        # the ingress relation is not yet there.\n        # Abort if there is no relation (instead of requiring the caller to guard against it).\n        if not self.relation:\n            return\n\n        if not host:\n            host = socket.getfqdn()\n\n        if not scheme:\n            # If scheme was not provided, use the one given to the constructor.\n            scheme = self._get_scheme()\n\n        data = {\n            \"model\": self.model.name,\n            \"name\": self.unit.name,\n            \"host\": host,\n            \"port\": str(port),\n            \"mode\": self._mode,\n            \"scheme\": scheme,\n        }\n\n        if self._strip_prefix:\n            data[\"strip-prefix\"] = \"true\"\n\n        if self._redirect_https:\n            data[\"redirect-https\"] = \"true\"\n\n        _validate_data(data, INGRESS_REQUIRES_UNIT_SCHEMA)\n        self.relation.data[self.unit].update(data)\n\n    @property\n    def _urls_from_relation_data(self) -> Dict[str, str]:\n        \"\"\"The full ingress URLs to reach every unit.\n\n        May return an empty dict if the URLs aren'"'"'t available yet.\n        \"\"\"\n        relation = self.relation\n        if not relation:\n            return {}\n\n        if not relation.app or not relation.app.name:  # type: ignore\n            # FIXME Workaround for https://github.com/canonical/operator/issues/693\n            # We must be in a relation_broken hook\n            return {}\n        assert isinstance(relation.app, Application)  # type guard\n\n        try:\n            raw = relation.data.get(relation.app, {}).get(\"ingress\")  # type: ignore\n        except ModelError as e:\n            log.debug(\n                \"Error {} attempting to read remote app data; \"\n                \"probably we are in a relation_departed hook\".format(e)\n            )\n            return {}\n\n        if not raw:\n            # remote side didn'"'"'t send yet\n            return {}\n\n        data = yaml.safe_load(raw)\n        _validate_data({\"ingress\": data}, INGRESS_PROVIDES_APP_SCHEMA)\n\n        return {unit_name: unit_data[\"url\"] for unit_name, unit_data in data.items()}\n\n    @property\n    def urls(self) -> Dict[str, str]:\n        \"\"\"The full ingress URLs to reach every unit.\n\n        May return an empty dict if the URLs aren'"'"'t available yet.\n        \"\"\"\n        current_urls = self._urls_from_relation_data\n        return current_urls\n\n    @property\n    def url(self) -> Optional[str]:\n        \"\"\"The full ingress URL to reach the current unit.\n\n        May return None if the URL isn'"'"'t available yet.\n        \"\"\"\n        urls = self.urls\n        if not urls:\n            return None\n        return urls.get(self.charm.unit.name)\n"}' --config 'python-packages=pydantic<2.0' --num-units 2
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .model.name = 'jubilant-d35a4f0c'
+ .model.type = 'iaas'
+ .model.controller = 'github-pr-0020d-lxd'
+ .model.cloud = 'localhost'
+ .model.version = '3.6.11'
+ .model.region = 'localhost'
+ .model.model_status.current = 'available'
+ .machines['0'].juju_status.current = 'started'
+ .machines['0'].juju_status.version = '3.6.11'
+ .machines['0'].hostname = 'juju-afc6a5-0'
+ .machines['0'].dns_name = '10.36.0.196'
+ .machines['0'].ip_addresses[0] = '10.36.0.196'
+ .machines['0'].instance_id = 'juju-afc6a5-0'
+ .machines['0'].machine_status.current = 'running'
+ .machines['0'].machine_status.message = 'Running'
+ .machines['0'].modification_status.current = 'applied'
+ .machines['0'].base.name = 'ubuntu'
+ .machines['0'].base.channel = '24.04'
+ .machines['0'].network_interfaces['eth0'].ip_addresses[0] = '10.36.0.196'
+ .machines['0'].network_interfaces['eth0'].mac_address = '00:16:3e:fc:06:2c'
+ .machines['0'].network_interfaces['eth0'].is_up = True
+ .machines['0'].network_interfaces['eth0'].gateway = '10.36.0.1'
+ .machines['0'].network_interfaces['eth0'].space = 'alpha'
+ .machines['0'].constraints = 'arch=amd64'
+ .machines['0'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
+ .machines['1'].juju_status.current = 'started'
+ .machines['1'].juju_status.version = '3.6.11'
+ .machines['1'].hostname = 'juju-afc6a5-1'
+ .machines['1'].dns_name = '10.36.0.233'
+ .machines['1'].ip_addresses[0] = '10.36.0.233'
+ .machines['1'].instance_id = 'juju-afc6a5-1'
+ .machines['1'].machine_status.current = 'running'
+ .machines['1'].machine_status.message = 'Running'
+ .machines['1'].modification_status.current = 'applied'
+ .machines['1'].base.name = 'ubuntu'
+ .machines['1'].base.channel = '24.04'
+ .machines['1'].network_interfaces['eth0'].ip_addresses[0] = '10.36.0.233'
+ .machines['1'].network_interfaces['eth0'].mac_address = '00:16:3e:25:d0:5f'
+ .machines['1'].network_interfaces['eth0'].is_up = True
+ .machines['1'].network_interfaces['eth0'].gateway = '10.36.0.1'
+ .machines['1'].network_interfaces['eth0'].space = 'alpha'
+ .machines['1'].constraints = 'arch=amd64'
+ .machines['1'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
+ .machines['2'].juju_status.current = 'pending'
+ .machines['2'].instance_id = 'pending'
+ .machines['2'].machine_status.current = 'pending'
+ .machines['2'].modification_status.current = 'idle'
+ .machines['2'].base.name = 'ubuntu'
+ .machines['2'].base.channel = '22.04'
+ .machines['2'].constraints = 'arch=amd64'
+ .machines['3'].juju_status.current = 'pending'
+ .machines['3'].instance_id = 'pending'
+ .machines['3'].machine_status.current = 'pending'
+ .machines['3'].modification_status.current = 'idle'
+ .machines['3'].base.name = 'ubuntu'
+ .machines['3'].base.channel = '22.04'
+ .machines['3'].constraints = 'arch=amd64'
+ .apps['haproxy'].charm = 'local:haproxy-0'
+ .apps['haproxy'].charm_origin = 'local'
+ .apps['haproxy'].charm_name = 'haproxy'
+ .apps['haproxy'].charm_rev = 0
+ .apps['haproxy'].exposed = False
+ .apps['haproxy'].base.name = 'ubuntu'
+ .apps['haproxy'].base.channel = '24.04'
+ .apps['haproxy'].app_status.current = 'active'
+ .apps['haproxy'].relations['certificates'][0].related_app = 'self-signed-certificates'
+ .apps['haproxy'].relations['certificates'][0].interface = 'tls-certificates'
+ .apps['haproxy'].relations['certificates'][0].scope = 'global'
+ .apps['haproxy'].relations['haproxy-peers'][0].related_app = 'haproxy'
+ .apps['haproxy'].relations['haproxy-peers'][0].interface = 'haproxy-peers'
+ .apps['haproxy'].relations['haproxy-peers'][0].scope = 'global'
+ .apps['haproxy'].units['haproxy/0'].workload_status.current = 'active'
+ .apps['haproxy'].units['haproxy/0'].juju_status.current = 'idle'
+ .apps['haproxy'].units['haproxy/0'].juju_status.version = '3.6.11'
+ .apps['haproxy'].units['haproxy/0'].leader = True
+ .apps['haproxy'].units['haproxy/0'].machine = '0'
+ .apps['haproxy'].units['haproxy/0'].open_ports[0] = '80/tcp'
+ .apps['haproxy'].units['haproxy/0'].public_address = '10.36.0.196'
+ .apps['haproxy'].endpoint_bindings[''] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['certificates'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['cos-agent'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ha'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-peers'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-route'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['haproxy-route-tcp'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ingress'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['ingress-per-unit'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['receive-ca-certs'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['reverseproxy'] = 'alpha'
+ .apps['haproxy'].endpoint_bindings['website'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].charm = 'any-charm'
+ .apps['ingress-per-unit-requirer-any'].charm_origin = 'charmhub'
+ .apps['ingress-per-unit-requirer-any'].charm_name = 'any-charm'
+ .apps['ingress-per-unit-requirer-any'].charm_rev = 92
+ .apps['ingress-per-unit-requirer-any'].exposed = False
+ .apps['ingress-per-unit-requirer-any'].base.name = 'ubuntu'
+ .apps['ingress-per-unit-requirer-any'].base.channel = '22.04'
+ .apps['ingress-per-unit-requirer-any'].charm_channel = 'latest/beta'
+ .apps['ingress-per-unit-requirer-any'].app_status.current = 'waiting'
+ .apps['ingress-per-unit-requirer-any'].app_status.message = 'waiting for machine'
+ .apps['ingress-per-unit-requirer-any'].relations['peer-any'][0].related_app = 'ingress-per-unit-requirer-any'
+ .apps['ingress-per-unit-requirer-any'].relations['peer-any'][0].interface = 'peer-any'
+ .apps['ingress-per-unit-requirer-any'].relations['peer-any'][0].scope = 'global'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/0'].workload_status.current = 'waiting'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/0'].workload_status.message = 'waiting for machine'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/0'].juju_status.current = 'allocating'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/0'].machine = '2'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/1'].workload_status.current = 'waiting'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/1'].workload_status.message = 'waiting for machine'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/1'].juju_status.current = 'allocating'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/1'].machine = '3'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings[''] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['dns-record'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['ingress'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['ldap'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['nginx-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['peer-any'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-aar'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-agent-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-airbyte-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-alertmanager-dispatch'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-alertmanager-remote-configuration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-anbox-stream-gateway'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-any'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-apache-vhost-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-apache-website'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-arangodb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-auth-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-autoscaling'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-aws-iam'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-aws-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-azure-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-barbican-hsm'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-barbican-secrets'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-baremetal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-bgp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-bind-rndc'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-block-storage'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cassandra'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-catalogue'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceilometer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-admin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-bootstrap'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-iscsi-admin-access'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-mds'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-osd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-radosgw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ceph-rbd-mirror'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-certificate-transfer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder-backup'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder-ceph-key'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder-gw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cinder-nedge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cloudflared-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-config-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-container-runtime'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-containerd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-containers'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cos-agent'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-cos-k8s-tokens'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dashboard-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-db'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-db2'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-designate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dex-oidc-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dns-record'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dns-transfer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-docker-registry'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-dockerhost'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-elastic-beats'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-elasticsearch'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-elasticsearch-datastore'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ephemeral-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-etcd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-etcd-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-event-service'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-external-cloud-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-external-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-fiveg-core-gnb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-fiveg-n2'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-fluentbit'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-forward-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ftn-compiler'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-gcp-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-generic-ip-port-user-pass'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-giraph'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-glance'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-glance-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-glance-simplestreams-sync'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-glauth-auxiliary'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-gnocchi'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-cloud-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-datasource'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-datasource-exchange'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-metadata'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-grafana-source'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-guacd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-hacluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-haproxy-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-heat-plugin-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-http'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-http-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-httpd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-hydra-endpoints'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-influxdb-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-infoblox'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ingress'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ingress-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ingress-per-unit'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-irc-bridge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-istio-gateway-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-java'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-jenkins-agent-v0'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-jenkins-extension'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-jenkins-slave'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-k8s-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-k8s-service'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kafka'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kafka-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kapacitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-karma-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-admin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-credentials'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-domain-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-fid-service-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-middleware'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-keystone-notifications'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kratos-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kube-control'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kube-dns'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kubeflow-dashboard-links'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kubernetes-cni'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-kubernetes-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-landscape-hosted'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ldap'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-livepatch-pro-airgapped-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lldp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-loadbalancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-local-monitors'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-login-ui-endpoints'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-logs'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-logstash-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-loki-push-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lte-core'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lxd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lxd-bgp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lxd-dns'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lxd-https'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-lxd-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-magma-orchestrator'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-manila-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-matrix-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-memcache'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-midonet'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mongodb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mongodb-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-monitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-monitors'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mount'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-munin-node'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-async'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-async-replication'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-monitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-root'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-router'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-mysql-shared'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nats'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nedge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-neutron-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-neutron-load-balancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-neutron-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-neutron-plugin-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-neutron-plugin-api-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nginx-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova-ceilometer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova-cell'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova-compute'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova-vgpu'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nova-vmware'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nrpe'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-nrpe-external-master'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ntp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-oathkeeper-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-oauth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-object-storage'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-odl-controller-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-oidc-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-openfga'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-opensearch-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-openstack-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-openstack-loadbalancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ovsdb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ovsdb-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ovsdb-cms'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ovsdb-manager'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ovsdb-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-pacemaker-remote'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-parca-scrape'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-parca-store'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-peer-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-pgsql'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-placement'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-pod-defaults'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-postfix-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-postgresql-async'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-postgresql-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prolog-epilog'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prometheus'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prometheus-manual'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prometheus-remote-write'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prometheus-rules'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-prometheus-scrape'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-public-address'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-quantum'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-rabbitmq'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-radosgw-multisite'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-radosgw-user'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ranger-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-redis'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-register-application'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-rest'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-s3'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-saml'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-script-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-sdcore-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-sdn-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-secrets'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-sentry-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-service-control'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-service-mesh'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-shards'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-slurmd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-slurmdbd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-slurmrestd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-smtp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-squid-auth-helper'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ssl-termination'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-statistics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-stun-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-swift'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-swift-global-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-swift-gw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-swift-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-syslog'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-telegraf-exec'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-temporal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-thruk-agent'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-tls-certificates'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-tokens'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-tracing'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-traefik-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-trino-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-ubuntu'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-udldap-userdata'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-untrusted-container-runtime'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-user-group'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-vault-autounseal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-vault-kv'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-vsd-rest-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-vsphere-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-web-publish'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-websso-fid-service-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-websso-trusted-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-xlc-compiler'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-zookeeper'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['provide-zuul'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['redis'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-aar'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-agent-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-airbyte-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-alertmanager-dispatch'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-alertmanager-remote-configuration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-anbox-stream-gateway'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-any'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-apache-vhost-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-apache-website'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-arangodb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-auth-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-autoscaling'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-aws-iam'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-aws-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-azure-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-barbican-hsm'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-barbican-secrets'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-baremetal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-bgp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-bind-rndc'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-block-storage'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cassandra'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-catalogue'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceilometer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-admin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-bootstrap'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-iscsi-admin-access'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-mds'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-osd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-radosgw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ceph-rbd-mirror'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-certificate-transfer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder-backup'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder-ceph-key'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder-gw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cinder-nedge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cloudflared-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-config-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-container-runtime'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-containerd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-containers'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cos-agent'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-cos-k8s-tokens'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dashboard-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-db'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-db2'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-designate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dex-oidc-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dns-record'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dns-transfer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-docker-registry'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-dockerhost'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-elastic-beats'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-elasticsearch'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-elasticsearch-datastore'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ephemeral-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-etcd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-etcd-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-event-service'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-external-cloud-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-external-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-fiveg-core-gnb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-fiveg-n2'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-fluentbit'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-forward-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ftn-compiler'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-gcp-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-generic-ip-port-user-pass'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-giraph'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-glance'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-glance-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-glance-simplestreams-sync'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-glauth-auxiliary'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-gnocchi'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-cloud-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-datasource'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-datasource-exchange'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-metadata'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-grafana-source'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-guacd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-hacluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-haproxy-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-haproxy-route-tcp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-heat-plugin-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-http'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-http-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-httpd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-hydra-endpoints'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-influxdb-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-infoblox'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ingress'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ingress-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ingress-per-unit'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-irc-bridge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-istio-gateway-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-java'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-jenkins-agent-v0'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-jenkins-extension'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-jenkins-slave'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-k8s-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-k8s-service'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kafka'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kafka-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kapacitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-karma-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-admin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-credentials'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-domain-backend'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-fid-service-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-middleware'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-keystone-notifications'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kratos-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kube-control'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kube-dns'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kubeflow-dashboard-links'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kubernetes-cni'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-kubernetes-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-landscape-hosted'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ldap'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-livepatch-pro-airgapped-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lldp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-loadbalancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-local-monitors'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-login-ui-endpoints'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-logs'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-logstash-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-loki-push-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lte-core'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lxd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lxd-bgp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lxd-dns'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lxd-https'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-lxd-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-magma-orchestrator'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-manila-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-matrix-auth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-memcache'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-midonet'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mongodb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mongodb-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-monitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-monitors'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mount'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-munin-node'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-async'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-async-replication'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-monitor'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-root'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-router'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-mysql-shared'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nats'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nedge'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-neutron-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-neutron-load-balancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-neutron-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-neutron-plugin-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-neutron-plugin-api-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nginx-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova-ceilometer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova-cell'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova-compute'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova-vgpu'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nova-vmware'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nrpe'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-nrpe-external-master'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ntp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-oathkeeper-info'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-oauth'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-object-storage'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-odl-controller-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-oidc-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-opencti-connector'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-openfga'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-opensearch-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-openstack-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-openstack-loadbalancer'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ovsdb'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ovsdb-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ovsdb-cms'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ovsdb-manager'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ovsdb-subordinate'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-pacemaker-remote'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-parca-scrape'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-parca-store'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-peer-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-pgsql'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-placement'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-pod-defaults'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-postfix-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-postgresql-async'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-postgresql-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prolog-epilog'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prometheus'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prometheus-manual'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prometheus-remote-write'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prometheus-rules'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-prometheus-scrape'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-public-address'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-quantum'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-rabbitmq'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-radosgw-multisite'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-radosgw-user'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ranger-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-redis'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-register-application'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-rest'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-s3'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-saml'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-script-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-sdcore-config'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-sdn-plugin'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-secrets'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-sentry-metrics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-service-control'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-service-mesh'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-shards'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-slurmd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-slurmdbd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-slurmrestd'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-smtp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-squid-auth-helper'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ssl-termination'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-statistics'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-stun-server'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-swift'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-swift-global-cluster'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-swift-gw'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-swift-proxy'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-syslog'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-telegraf-exec'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-temporal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-thruk-agent'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-tls-certificates'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-tokens'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-tracing'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-traefik-route'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-trino-client'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-ubuntu'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-udldap-userdata'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-untrusted-container-runtime'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-user-group'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-vault-autounseal'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-vault-kv'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-vsd-rest-api'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-vsphere-integration'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-web-publish'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-websso-fid-service-provider'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-websso-trusted-dashboard'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-xlc-compiler'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-zookeeper'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['require-zuul'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['saml'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['send-ca-cert'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['smtp'] = 'alpha'
+ .apps['ingress-per-unit-requirer-any'].endpoint_bindings['smtp-legacy'] = 'alpha'
+ .apps['self-signed-certificates'].charm = 'self-signed-certificates'
+ .apps['self-signed-certificates'].charm_origin = 'charmhub'
+ .apps['self-signed-certificates'].charm_name = 'self-signed-certificates'
+ .apps['self-signed-certificates'].charm_rev = 416
+ .apps['self-signed-certificates'].exposed = False
+ .apps['self-signed-certificates'].base.name = 'ubuntu'
+ .apps['self-signed-certificates'].base.channel = '24.04'
+ .apps['self-signed-certificates'].charm_channel = '1/edge'
+ .apps['self-signed-certificates'].app_status.current = 'active'
+ .apps['self-signed-certificates'].relations['certificates'][0].related_app = 'haproxy'
+ .apps['self-signed-certificates'].relations['certificates'][0].interface = 'tls-certificates'
+ .apps['self-signed-certificates'].relations['certificates'][0].scope = 'global'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].workload_status.current = 'active'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.current = 'idle'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].juju_status.version = '3.6.11'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].leader = True
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].machine = '1'
+ .apps['self-signed-certificates'].units['self-signed-certificates/0'].public_address = '10.36.0.233'
+ .apps['self-signed-certificates'].endpoint_bindings[''] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['certificates'] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['send-ca-cert'] = 'alpha'
+ .apps['self-signed-certificates'].endpoint_bindings['tracing'] = 'alpha'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.current = 'pending'
+ .machines['2'].machine_status.current = 'allocating'
+ .machines['2'].machine_status.message = 'acquiring LXD image'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['3'].machine_status.current = 'pending'
+ .machines['3'].machine_status.current = 'allocating'
+ .machines['3'].machine_status.message = 'acquiring LXD image'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'acquiring LXD image'
+ .machines['2'].machine_status.message = 'Retrieving image: metadata: 100% (3.14GB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: metadata: 100% (3.14GB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 1% (1.83MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 1% (1.83MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 2% (2.27MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 2% (2.27MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 3% (2.69MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 3% (2.69MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 5% (3.53MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 5% (3.53MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 9% (5.17MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 9% (5.17MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 13% (7.02MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 13% (7.02MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 20% (9.58MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 20% (9.58MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 29% (12.38MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 29% (12.38MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 40% (15.40MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 40% (15.40MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 51% (17.77MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 51% (17.77MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 61% (19.59MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 61% (19.59MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 67% (19.97MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 67% (19.97MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 74% (20.61MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 74% (20.61MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 82% (21.11MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 82% (21.11MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 90% (21.67MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 90% (21.67MB/s)'
+ .machines['2'].machine_status.message = 'Retrieving image: rootfs: 98% (22.44MB/s)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].machine_status.message = 'Retrieving image: rootfs: 98% (22.44MB/s)'
+ .machines['2'].machine_status.message = 'Creating container'
- .machines['3'].machine_status.message = 'acquiring LXD image'
+ .machines['3'].machine_status.message = 'Failed remote LXD image download. Retrying. Attempt number 2'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['2'].instance_id = 'pending'
- .machines['2'].machine_status.current = 'allocating'
- .machines['2'].machine_status.message = 'Creating container'
- .machines['2'].modification_status.current = 'idle'
+ .machines['2'].instance_id = 'juju-afc6a5-2'
+ .machines['2'].machine_status.current = 'running'
+ .machines['2'].machine_status.message = 'Container started'
+ .machines['2'].modification_status.current = 'applied'
+ .machines['2'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['3'].machine_status.message = 'Failed remote LXD image download. Retrying. Attempt number 2'
+ .machines['3'].machine_status.message = 'Failed remote LXD image download. Retrying. Attempt number 3'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .machines['2'].dns_name = '10.36.0.138'
+ .machines['2'].ip_addresses[0] = '10.36.0.138'
- .machines['2'].machine_status.message = 'Container started'
+ .machines['2'].machine_status.message = 'Running'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/0'].public_address = '10.36.0.138'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['3'].juju_status.current = 'pending'
+ .machines['3'].juju_status.current = 'down'
+ .machines['3'].juju_status.message = 'agent is not communicating with the server'
- .machines['3'].machine_status.message = 'Failed remote LXD image download. Retrying. Attempt number 3'
+ .machines['3'].machine_status.message = 'failed to start machine 3 (attempt count exceeded: Failed remote image download: Alias already exists: juju/ubuntu@22.04/amd64), retrying in 10s (10 more attempts)'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['3'].machine_status.message = 'failed to start machine 3 (attempt count exceeded: Failed remote image download: Alias already exists: juju/ubuntu@22.04/amd64), retrying in 10s (10 more attempts)'
+ .machines['3'].machine_status.message = 'Creating container'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
- .machines['3'].instance_id = 'pending'
- .machines['3'].machine_status.current = 'allocating'
- .machines['3'].machine_status.message = 'Creating container'
- .machines['3'].modification_status.current = 'idle'
+ .machines['3'].instance_id = 'juju-afc6a5-3'
+ .machines['3'].machine_status.current = 'running'
+ .machines['3'].machine_status.message = 'Container started'
+ .machines['3'].modification_status.current = 'applied'
+ .machines['3'].hardware = 'arch=amd64 cores=0 mem=0M availability-zone=github-runner virt-type=container'
[32mINFO    [0m jubilant.wait:_juju.py:982 wait: status changed:
+ .machines['3'].dns_name = '10.36.0.25'
+ .machines['3'].ip_addresses[0] = '10.36.0.25'
- .machines['3'].machine_status.message = 'Container started'
+ .machines['3'].machine_status.message = 'Running'
+ .apps['ingress-per-unit-requirer-any'].units['ingress-per-unit-requirer-any/1'].public_address = '10.36.0.25'