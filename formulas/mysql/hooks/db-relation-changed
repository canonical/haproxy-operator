#!/usr/bin/env python

import os
import random
import string
import subprocess
import urllib

import MySQLdb

change_type = os.environ.get("ENSEMBLE_CHANGE")

change_unit = os.environ.get("ENSEMBLE_REMOTE_UNIT")
# We'll name the database the same as the service.
database_name, _ = change_unit.split("/")
# A user per service unit so we can deny access quickly
user = change_unit.replace("/","-")
connection = None

def get_db_cursor():
    # Connect to mysql
    passwd = open("/var/lib/ensemble/mysql.passwd").read().strip()
    print passwd
    connection = MySQLdb.connect(user="root", host="localhost", passwd=passwd)

    return connection.cursor()

def on_join():

    cursor = get_db_cursor()

    # Find existing databases
    cursor.execute("show databases")
    databases = [i[0] for i in cursor.fetchall()]

    # Determine if we need to create a new database
    if database_name not in databases:
      # Create new database
      cursor.execute(
          "create database `%s` character set utf8" % database_name)

    # Create database user and grant access
    service_password = "".join(random.sample(string.letters, 10))
    cursor.execute(
        "grant all on `%s`.* to `%s` identified by '%s'" % (
            database_name,
            user,
            service_password))

    cursor.execute("flush privileges")

    cursor.close()

    hostname = urllib.urlopen(
        "http://169.254.169.254/latest/meta-data/local-hostname").read()

    print "setting values"
    print "host", hostname
    print "database", database_name
    print "user", user
    print "password", service_password


    print str(["relation-set",
     "database=%s" % database_name,
     "user=%s" % user,
     "password=%s" % service_password,
     'host=%s' % hostname,])

    # Store new values in relation settings.
    p = subprocess.Popen(
        ["relation-set",
         "database=%s" % database_name,
         "user=%s" % user,
         "password=%s" % service_password,
         'host=%s' % hostname,],
        close_fds = True)

    os.waitpid(p.pid, 0)

def on_depart():
    cursor = get_db_cursor()
    cursor.execute("revoke all privileges on `%s`.* from `%s`" % (database_name, user))
    print "revoked privileges for `%s` on database `%s`" % (user, database_name)

if change_type == "joined":
    on_join()
elif change_type == "departed":
    on_departed()

if connection is not None:
  connection.close()
